import os
import unittest
import warnings

from synbiohub_adapter.query_synbiohub import SynBioHubQuery
from synbiohub_adapter.SynBioHubUtil import SD2Constants 
import SPARQLWrapper


class TestAuthentication(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        self.user = 'sd2e'
        if 'SBH_PASSWORD' in os.environ.keys():
            self.password = os.environ['SBH_PASSWORD']
        else:
            self.password = getpass()

    def test_login(self):
        sbh_query = SynBioHubQuery(SD2Constants.SD2_SERVER)
        result = sbh_query.login(self.user, self.password)
        self.assertEqual(result, None)

    def test_wrong_password(self):
        sbh_query = SynBioHubQuery(SD2Constants.SD2_SERVER)
        with self.assertRaises(SPARQLWrapper.SPARQLExceptions.Unauthorized) as exc:
            sbh_query.login(self.user, 'Not_the_PaSsW0rD')

    def test_wrong_user(self):
        sbh_query = SynBioHubQuery(SD2Constants.SD2_SERVER)
        with self.assertRaises(SPARQLWrapper.SPARQLExceptions.Unauthorized) as exc:
            sbh_query.login('Not_the_U5eR', self.password)

    def test_query_without_login(self):
        """An exception should be raised if a query is run without calling login first.
        """
        sbh_query = SynBioHubQuery(SD2Constants.SD2_SERVER)
        with self.assertRaises(SPARQLWrapper.SPARQLExceptions.Unauthorized) as exc:
            # Silence the warning generated by SPARQLWrapper when
            # text/html is received instead of JSON
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                result = sbh_query.query_design_inducers()

    def test_query_with_login(self):
        """A properly authenticated query sould return a dictionary.
        """
        sbh_query = SynBioHubQuery(SD2Constants.SD2_SERVER)
        sbh_query.login(self.user, self.password)
        result = sbh_query.query_design_inducers()
        self.assertEqual(type(result), dict)
